name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  Build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            runtimes: '["linux-arm", "linux-arm64", "linux-bionic-arm64", "linux-bionic-x64", "linux-musl-arm", "linux-musl-arm64", "linux-musl-x64", "linux-x64"]'
          - os: macos-latest
            runtimes: '["osx-arm64", "osx-x64"]'
          - os: windows-latest
            runtimes: '["win-arm64", "win-x64", "win-x86"]'
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4.3.1
      with:
        dotnet-version: '9'
    
    - name: Restore dependencies for all runtimes
      run: |
        for runtime in $(echo '${{ matrix.runtimes }}' | jq -r '.[]'); do
          echo "Restoring dependencies for runtime: $runtime"
          dotnet restore --runtime "$runtime"
        done
      shell: bash
    
    - name: Build solution for all runtimes
      run: |
        for runtime in $(echo '${{ matrix.runtimes }}' | jq -r '.[]'); do
          echo "Building solution for runtime: $runtime"
          dotnet build --configuration Release --no-restore
        done
      shell: bash

    - name: Build Platform for all runtimes
      run: |
        for runtime in $(echo '${{ matrix.runtimes }}' | jq -r '.[]'); do
          echo "Building Platform for runtime: $runtime"
          dotnet build src/Platform --runtime "$runtime" --self-contained -p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true -p:DebugType=embedded --configuration Release --no-restore
        done
      shell: bash

    - name: Test for all runtimes
      run: |
        for runtime in $(echo '${{ matrix.runtimes }}' | jq -r '.[]'); do
          echo "Testing for runtime: $runtime"
          dotnet test --runtime "$runtime" --no-build --verbosity normal
        done
      shell: bash

    - name: Publish for all runtimes
      run: |
        for runtime in $(echo '${{ matrix.runtimes }}' | jq -r '.[]'); do
          echo "Publishing for runtime: $runtime"
          dotnet publish --runtime "$runtime" --self-contained -p:GenerateRuntimeConfigurationFiles=false -p:PublishSingleFile=true -p:DebugType=embedded src/Platform --output artifacts/"$runtime" --configuration Release --no-build
        done
      shell: bash

    - name: Rename artifact file (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        for runtime in $(echo '${{ matrix.runtimes }}' | jq -r '.[]'); do
          echo "Renaming artifact for runtime: $runtime"
          mv artifacts/"$runtime"/Void.Proxy artifacts/"$runtime"/void
        done
      shell: bash

    - name: Rename artifact file (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $runtimes = ConvertFrom-Json '${{ matrix.runtimes }}'
        foreach ($runtime in $runtimes) {
          Write-Output "Renaming artifact for runtime: $runtime"
          Rename-Item -Path "artifacts/$runtime/Void.Proxy.exe" -NewName "void.exe"
        }
    
    # Consolidate artifact upload into a single upload per OS.
    - name: Upload Build Artifacts (non-Windows)
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v4.6.2
      with:
        name: void-artifacts
        path: artifacts
        compression-level: 9
        if-no-files-found: error

    - name: Upload Build Artifacts (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4.6.2
      with:
        name: void-artifacts
        path: artifacts
        compression-level: 9
        if-no-files-found: error

    - name: Echo Download URL
      run: echo "Artifacts uploaded."